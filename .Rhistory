<<<<<<< HEAD
col='white',
names.arg=df$Month,
xlab='Month 2020',
ylab='Frequency',
legend.text=c('Unemployment rate','Cumulative_number_for_14_days_of_COVID-19_cases_per_100000'),
args.legend=list(text.col=cols,col=cols,border=cols,bty='n')
=======
install.packages("ggplot2")
library(ggplot2)
require(ggplot2)
install.packages("swirl")
library(swirl)
install_course("R Programming E")
swirl()
x
ls
exists("x")
library(swirl)
install_course("R Programming E")
library(readr)
library(knitr)
library(tidyverse)
library(readr)
library(knitr)
library(tidyverse)
library(readr)
library(knitr)
library(tidyverse)
library(readr)
library(knitr)
library(tidyverse)
library(readr)
library(knitr)
library(tidyverse)
library(dplyr)
library(ggplot2)
#14 se for sampling distribution of mean n = 50
se <- 0.5/sqrt(50)
se
round(se,3)
#14 se for sampling distribution of mean n = 50
se <- 30/sqrt(3000)
round(se,3)
round(pnorm(q = 590, mean = 600, sd = 30)*100, 3)
round(pnorm(q = 595, mean = 600, sd = 30)*100, 3)
#2 10/20 will experience anxiety in 12 month period
#think i can use binomial here
round(dbinom(x = 10, size = 20, prob = 0.2),3)
#3 5/20
round(dbinom(x = 5, size = 20, prob = 0.2),3)
#4 5/30
round(dbinom(x = 5, size = 30, prob = 0.2),3)
#5 5 or 6 out of 20
a<-dbinom(x = 5:6, size = 20, prob = 0.2) %>% sum()
#5 5 or 6 out of 20
a<-dbinom(x = 5:6, size = 20, prob = 0.2) %>% sum()
round(a,3)
library(dplyr)
library(ggplot2)
#5 5 or 6 out of 20
a<-dbinom(x = 5:6, size = 20, prob = 0.2) %>% sum()
round(a,3)
#6 5 or more out of 10
round(pbinom(q = 4, size = 10, prob = 0.2, lower.tail = FALSE), 3)
#7 2 or more out of 20
b <- 1-pbinom(q = 2, size = 20, prob = 0.2, lower.tail = TRUE)
round(b, 3)
binom(x = 0:10, size = 30, prob = 0.2) %>% sum()
round(pbinom(q = 10, size = 30, prob = 0.2, lower.tail = TRUE), 3)
#8 5 or less out of 20
round(pbinom(q = 5, size = 20, prob = 0.2, lower.tail = TRUE), 3)
#10 and 11 mcq and expected no of attacks in 2 years
#12 10 in one year
round(dpois(x = 10, lambda = 10), 3)
#13 30 people in 2 years
round(dpois(x = 30, lambda = 10*2), 3)
#14 20 or less within a year
round(ppois(q = 20, lambda = 10), 3)
#15 15-20 within a year
d <- ppois(q = 20, lambda = 10) - ppois(q = 14, lambda = 10)
round(d, 3)
round(ppois(q = 20, lambda = 10, lower.tail = FALSE), 3)
#17 15 or 17 in a year
one <- dpois(x = 15, lambda = 10)
two <- dpois(x = 17, lambda = 10)
ans<- one+two
round(ans, 3)
#21 z score of 37.33 temp body
z <- (37.33-36.81)/0.41
z
round(z,x)
round(z,2)
#22 z score 35.72
score <- (35.72-36.81)/0.41
round(score,2)
round(temp, 2)
#23 2.41 z score
temp <- (2.41 * 0.41) + 36.81
round(temp, 2)
#24 -1.24 z score
temp2 <- (-1.24 * 0.41) + 36.81
round(temp2, 2)
#25 less than 36.39
round(pnorm(q = 36.39, mean = 36.81, sd = 0.41) * 100,2)
#25 less than 36.39
round(pnorm(q = 36.39, mean = 36.81, sd = 0.41),2)
#26 less than 37.93
round(pnorm(q = 37.93, mean = 36.81, sd = 0.41), 3)
#27 less than 35.82
round(pnorm(q = 35.82, mean = 36.81, sd = 0.41), 3)
#28 greater than 36.02
round(pnorm(q = 36.02, mean = 36.81, sd = 0.41, lower.tail = FALSE), 3)
#29 greater than 37.39
round(pnorm(q = 37.39, mean = 36.81, sd = 0.41, lower.tail = FALSE),3)
#30 greater than 38
round(pnorm(q = 38, mean = 36.81, sd = 0.41, lower.tail = FALSE),3)
#31 between 36.13 and 36.64
e <- pnorm(q = 36.64, mean = 36.81, sd = 0.41) - pnorm(q = 36.13, mean = 36.81, sd = 0.41)
round(e, 3)
#32 between 36.95 and 37.05
f <- pnorm(q = 37.05, mean = 36.81, sd = 0.41) - pnorm(q = 36.95, mean = 36.81, sd = 0.41)
round(f,3)
#33 between 37.2 and 37.3
g<-pnorm(q = 37.3, mean = 36.81, sd = 0.41) - pnorm(q = 37.2, mean = 36.81, sd = 0.41)
round(g,3)
#34 87th percentile what is temp
qnorm(p = 0.87, mean = 36.81, sd = 0.41)
#35 9th percentile what is temp
qnorm(p = 0.09, mean = 36.81, sd = 0.41)
#36 what percentile mild fever 39
zscore <- (39-36.81)/0.41
pnorm(q = zscore, mean = 36.81, sd = 0.41)
#2 10/20 will experience anxiety in 12 month period
#think i can use binomial here
round(dbinom(x = 10, size = 20, prob = 0.2),3)
#3 5/20
round(dbinom(x = 5, size = 20, prob = 0.2),3)
#4 5/30
round(dbinom(x = 5, size = 30, prob = 0.2),3)
#7 2 or more out of 20
b <- 1-pbinom(q = 2, size = 20, prob = 0.2, lower.tail = FALSE)
round(b, 3)
#7 2 or more out of 20
b <- pbinom(q = 2, size = 20, prob = 0.2, lower.tail = TRUE)
round(b, 3)
#7 2 or more out of 20
b <- 1-pbinom(q = 2, size = 20, prob = 0.2, lower.tail = TRUE)
install.packages("shinydashboard")
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shinydashboard)
install.packages("shinydashboard", dependencies = TRUE)
install.packages("shinydashboard", dependencies = TRUE)
library(shinydashboard)
#making a simple UI
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
>>>>>>> 48164250c7498e0d3d21ff9eedbb8e4be98e2908
)
plot <- box();
return(plot)
}
<<<<<<< HEAD
covidData <- getCSV("au_covid.csv")
unemploymentData <- getDisplayGovUnemploymentData()
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
#df_unemployment=rename(df_unemployment, date = release_date)
#unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
df <- covidData %>% left_join(unemploymentData,by = "date")
df <- df[-c(1:20),]
df<-separate(df, "date", c("Year", "Month", "Day"), sep = "-")
df <- df %>%
group_by(Month) %>%
summarise_at(vars(countryCode), funs(mean(Unemployment_rate),mean(Cumulative_number)))
df <- df[-c(9),]
df$Month[df$Month  == '01']  <-  'January'
df$Month[df$Month  == '02']  <-  'Febrauary'
df$Month[df$Month  == '03']  <-  'March'
df$Month[df$Month  == '04']  <-  'April'
df$Month[df$Month  == '05']  <-  'May'
df$Month[df$Month  == '06']  <-  'June'
df$Month[df$Month  == '07']  <-  'July'
df$Month[df$Month  == '08']  <-  'August'
# Rename Columns
names(df)[names(df) == "mean..1"] <- "mean_unemployment_rate"
names(df)[names(df) == "mean..2"] <- "mean_cumulative_number"
df
covidData <- getCSV("au_covid.csv")
unemploymentData <- getDisplayGovUnemploymentData()
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
#unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
df <- covidData %>% left_join(unemploymentData,by = "date")
df <- df[-c(1:20),]
df<-separate(df, "date", c("Year", "Month", "Day"), sep = "-")
df
covidData <- getCSV("au_covid.csv")
unemploymentData <- getDisplayGovUnemploymentData()
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
#unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData
df <- covidData %>% left_join(unemploymentData,by = "date")
df <- df[-c(1:20),]
df
#df_unemployment=rename(df_unemployment, date = release_date)
#unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData
df <- covidData %>% left_join(unemploymentData,by = "date")
df
unemploymentData
covidData
unemploymentData <- getDisplayGovUnemploymentData()
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
# Get data
covidAU_subset <- getDisplayGovCovidData()
unemploymentData <- read.csv("data/unemployment_rate.csv", header=TRUE,stringsAsFactors = FALSE)
covidData <- getCSV("au_covid.csv")
unemploymentData <- read.csv("unemployment_rate.csv", header=TRUE,stringsAsFactors = FALSE)
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData
covidData <- getCSV("au_covid.csv")
unemploymentData <- read.csv("unemployment_rate.csv", header=TRUE,stringsAsFactors = FALSE)
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
covidData <- getCSV("au_covid.csv")
unemploymentData <- read.csv("unemployment_rate.csv", header=TRUE,stringsAsFactors = FALSE)
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
#unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData$date <- paste(unemploymentData$date,"-01",sep="")
t
unemploymentData <- read.csv("unemployment_rate.csv", header=TRUE,stringsAsFactors = FALSE)
covidData <- getCSV("au_covid.csv")
unemploymentData <- read.csv("data/unemployment_rate.csv", header=TRUE,stringsAsFactors = FALSE)
getwd()
covidData <- getCSV("au_covid.csv")
#unemploymentData <- getDisplayGovUnemploymentData()
covidData <- getCSV("unemployment_rate")
covidData <- getCSV("au_covid.csv")
#unemploymentData <- getDisplayGovUnemploymentData()
unemploymentData <- getCSV("unemployment_rate.csv")
unemploymentData
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
#unemploymentData$date <- paste(unemploymentData$date,"-01",sep="")
unemploymentData
runApp()
covidData <- getCSV("au_covid.csv")
unemploymentData <- getCSV("unemployment_rate.csv")
unemploymentData
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData
covidData
df <- covidData %>% left_join(unemploymentData,by = "date")
covidData <- getCSV("au_covid.csv")
unemploymentData <- getDisplayGovUnemploymentData()
unemploymentData
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData
covidData
df <- covidData %>% left_join(unemploymentData,by = "date")
df
df <- df[-c(1:20),]
df<-separate(df, "date", c("Year", "Month", "Day"), sep = "-")
unemploymentData <- getCSV("unemployment_rate.csv")
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData
unemploymentData <- getCSV("unemployment_rate.csv")
names(data)[names(data) == "release_date"] <- "date"
unemploymentData <- getCSV("unemployment_rate.csv")
names(unemploymentData)[names(unemploymentData) == "release_date"] <- "date"
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData
runApp()
covidData <- getCSV("au_covid.csv")
covidData <- getCSV("au_covid.csv")
unemploymentData <- getCSV("unemployment_rate.csv")
names(unemploymentData)[names(unemploymentData) == "release_date"] <- "date"
unemploymentData
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
unemploymentData
covidData
df <- covidData %>% left_join(unemploymentData,by = "date")
df
df <- df[-c(1:20),]
df<-separate(df, "date", c("Year", "Month", "Day"), sep = "-")
df <- df %>%
group_by(Month) %>%
summarise_at(vars(countryCode), funs(mean(Unemployment_rate),mean(Cumulative_number)))
covidData <- getCSV("au_covid.csv")
unemploymentData <- getCSV("unemployment_rate.csv")
names(unemploymentData)[names(unemploymentData) == "release_date"] <- "date"
unemploymentData
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "Cumulative_number"
unemploymentData <- unemploymentData[, c(1,2)]
#df_unemployment=rename(df_unemployment, date = release_date)
unemploymentData
unemploymentData$date <- as.Date(paste(unemploymentData$date,"-01",sep=""))
names(unemploymentData)[names(unemploymentData) == "Unemployment rate"] <- "Unemployment_rate"
unemploymentData
covidData
df <- covidData %>% left_join(unemploymentData,by = "date")
df
df <- df[-c(1:20),]
df<-separate(df, "date", c("Year", "Month", "Day"), sep = "-")
df <- df %>%
group_by(Month) %>%
summarise_at(vars(countryCode), funs(mean(Unemployment_rate),mean(Cumulative_number)))
df <- df[-c(9),]
df$Month[df$Month  == '01']  <-  'January'
df$Month[df$Month  == '02']  <-  'Febrauary'
df$Month[df$Month  == '03']  <-  'March'
df$Month[df$Month  == '04']  <-  'April'
df$Month[df$Month  == '05']  <-  'May'
df$Month[df$Month  == '06']  <-  'June'
df$Month[df$Month  == '07']  <-  'July'
df$Month[df$Month  == '08']  <-  'August'
# Rename Columns
names(df)[names(df) == "mean..1"] <- "mean_unemployment_rate"
names(df)[names(df) == "mean..2"] <- "mean_cumulative_number"
cols <- c('red','blue')
par(lwd=6)
barplot(
t(df[c('mean_unemployment_rate','mean_cumulative_number')]),
beside=T,
ylim=c(0,30),
border=cols,
col='white',
names.arg=df$Month,
xlab='Month 2020',
ylab='Frequency',
legend.text=c('Unemployment rate','Cumulative_number_for_14_days_of_COVID-19_cases_per_100000'),
args.legend=list(text.col=cols,col=cols,border=cols,bty='n')
)
runApp()
runApp()
df_covid <- read_csv("data/au_covid.csv")
df_covid[is.na(df_covid)] = 0
df_covid=rename(df_covid, cumulative_number = 'Cumulative_number_for_14_days_of_COVID-19_cases_per_100000')
df_stocks<- read_csv("data/Stocks.csv")
df_stocks=rename(df_stocks, date = 'Date')
df <- df_covid %>% left_join(df_stocks,by = "date")
View(df)
df_new<-separate(df, "date", c("Year", "Month", "Day"), sep = "-")
df_new<-na.omit(df_new)
df_main <- df_new %>%
group_by(Month,Ticker) %>%
summarise_at(vars(countryCode), funs(mean(High),mean(Low),mean(cumulative_number)))
df_main <- df_main[-c(14548:15921),]
df_main$Month[df_main$Month  == '01']  <-  'January'
df_main$Month[df_main$Month  == '02']  <-  'Febrauary'
df_main$Month[df_main$Month  == '03']  <-  'March'
df_main$Month[df_main$Month  == '04']  <-  'April'
df_main$Month[df_main$Month  == '05']  <-  'May'
df_main$Month[df_main$Month  == '06']  <-  'June'
df_covid <- read_csv("data/au_covid.csv")
df_covid[is.na(df_covid)] = 0
df_covid=rename(df_covid, cumulative_number = 'Cumulative_number_for_14_days_of_COVID-19_cases_per_100000')
df_covid <- read_csv("data/au_covid.csv")
df_covid[is.na(df_covid)] = 0
names(df_covid)[names(df_covid) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "cumulative_number"
df_stocks<- read_csv("data/Stocks.csv")
df_stocks=rename(df_stocks, date = 'Date')
df_stocks<- read_csv("data/Stocks.csv")
#df_stocks=rename(df_stocks, date = 'Date')
names(df_stocks)[names(df_stocks) == "date"] <- "Date"
df <- df_covid %>% left_join(df_stocks,by = "date")
df_covid
df_stocks
names(df_covid)[names(df_covid) == "date"] <- "Date"
df_covid
df_stocks
df <- df_covid %>% left_join(df_stocks,by = "date")
df <- df_covid %>% left_join(df_stocks,by = "Date")
df
df_new<-separate(df, "Date", c("Year", "Month", "Day"), sep = "-")
df_new
df_new<-na.omit(df_new)
df_main <- df_new %>%
group_by(Month,Ticker) %>%
summarise_at(vars(countryCode), funs(mean(High),mean(Low),mean(cumulative_number)))
df_main
df_main <- df_main[-c(14548:15921),]
df_main$Month[df_main$Month  == '01']  <-  'January'
df_main$Month[df_main$Month  == '02']  <-  'Febrauary'
df_main$Month[df_main$Month  == '03']  <-  'March'
df_main$Month[df_main$Month  == '04']  <-  'April'
df_main$Month[df_main$Month  == '05']  <-  'May'
df_main$Month[df_main$Month  == '06']  <-  'June'
df_main$Month[df_main$Month  == '07']  <-  'July'
df_main$Month[df_main$Month  == '08']  <-  'August'
df_main
df_main=rename(df_main, mean_high_maximum_price_during_the_day = mean..1)
#df_main=rename(df_main, mean_high_maximum_price_during_the_day = mean..1)
#df_main=rename(df_main, mean_low_minimum_price_during_the_day = mean..2)
#df_main=rename(df_main, sum_cases = mean..3)
names(df_main)[names(df_main) == "mean..1"] <- "mean_high_maximum_price_during_the_day"
names(df_main)[names(df_main) == "mean..2"] <- "mean_low_minimum_price_during_the_day"
names(df_main)[names(df_main) == "mean..3"] <- "sum_cases"
a<-filter(df_main, Ticker == 'CBA') #filter for each company
a
cols <- c('red','blue');
par(lwd=6);
barplot(
#t(a[c('mean_high_maximum_price_during_the_day','mean_low_minimum_price_during_the_day','sum_cases')]),
t(a[c('mean_high_maximum_price_during_the_day','mean_low_minimum_price_during_the_day')]),
beside=T,
ylim=c(0,100),#change this based on the company
border=cols,
col='white',
names.arg=a$Month,
xlab='Months 2020',
ylab='Frequency',
legend.text=c('Maximum price','Minimun Price'),
args.legend=list(text.col=cols,col=cols,border=cols,bty='n')
);
box();
covidData <- getCSV("au_covid.csv")
stockData <- getCSV("Stocks.csv")
#df_covid <- read_csv("data/au_covid.csv")
# Fill missing value and rename columns
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "cumulative_number"
#df_stocks<- read_csv("data/Stocks.csv")
#df_stocks=rename(df_stocks, date = 'Date')
names(stockData)[names(stockData) == "date"] <- "Date"
names(covidData)[names(covidData) == "date"] <- "Date"
covidData
stockData
# Join Tables and omit missing values
df <- covidData %>% left_join(stockData,by = "Date")
df
df<-separate(df, "Date", c("Year", "Month", "Day"), sep = "-")
df
df<-na.omit(df)
df <- df %>%
group_by(Month,Ticker) %>%
summarise_at(vars(countryCode), funs(mean(High),mean(Low),mean(cumulative_number)))
df
df <- df[-c(14548:15921),]
df$Month[df$Month  == '01']  <-  'January'
df$Month[df$Month  == '02']  <-  'Febrauary'
df$Month[df$Month  == '03']  <-  'March'
df$Month[df$Month  == '04']  <-  'April'
df$Month[df$Month  == '05']  <-  'May'
df$Month[df$Month  == '06']  <-  'June'
df$Month[df$Month  == '07']  <-  'July'
df$Month[df$Month  == '08']  <-  'August'
df
#df_main=rename(df_main, mean_high_maximum_price_during_the_day = mean..1)
#df_main=rename(df_main, mean_low_minimum_price_during_the_day = mean..2)
#df_main=rename(df_main, sum_cases = mean..3)
# Rename columns
names(df)[names(df) == "mean..1"] <- "mean_high_maximum_price_during_the_day"
names(df)[names(df) == "mean..2"] <- "mean_low_minimum_price_during_the_day"
names(df)[names(df) == "mean..3"] <- "sum_cases"
# Filter the company's name
df <- filter(df, Ticker == 'CBA') #filter for each company
df
# Generate plot
cols <- c('red','blue');
par(lwd=6);
plot <- barplot(
t(df[c('mean_high_maximum_price_during_the_day','mean_low_minimum_price_during_the_day')]),
beside=T,
ylim=c(0,100),#change this based on the company
border=cols,
col='white',
names.arg=df$Month,
xlab='Months 2020',
ylab='Frequency',
legend.text=c('Maximum price','Minimun Price'),
args.legend=list(text.col=cols,col=cols,border=cols,bty='n')
);
return(plot);
plot
plot <- barplot(
t(df[c('mean_high_maximum_price_during_the_day','mean_low_minimum_price_during_the_day')]),
beside=T,
ylim=c(0,100),#change this based on the company
border=cols,
col='white',
names.arg=df$Month,
xlab='Months 2020',
ylab='Frequency',
legend.text=c('Maximum price','Minimun Price'),
args.legend=list(text.col=cols,col=cols,border=cols,bty='n')
);
plot
barplot(
t(df[c('mean_high_maximum_price_during_the_day','mean_low_minimum_price_during_the_day')]),
beside=T,
ylim=c(0,100),#change this based on the company
border=cols,
col='white',
names.arg=df$Month,
xlab='Months 2020',
ylab='Frequency',
legend.text=c('Maximum price','Minimun Price'),
args.legend=list(text.col=cols,col=cols,border=cols,bty='n')
);
covidData <- getCSV("au_covid.csv")
stockData <- getCSV("Stocks.csv")
#df_covid <- read_csv("data/au_covid.csv")
# Fill missing value and rename columns
covidData[is.na(covidData)] = 0
names(covidData)[names(covidData) == "Cumulative_number_for_14_days_of_COVID-19_cases_per_100000"] <- "cumulative_number"
#df_stocks<- read_csv("data/Stocks.csv")
#df_stocks=rename(df_stocks, date = 'Date')
names(stockData)[names(stockData) == "date"] <- "Date"
names(covidData)[names(covidData) == "date"] <- "Date"
covidData
stockData
# Join Tables and omit missing values
df <- covidData %>% left_join(stockData,by = "Date")
df
df<-separate(df, "Date", c("Year", "Month", "Day"), sep = "-")
df
df<-na.omit(df)
df <- df %>%
group_by(Month,Ticker) %>%
summarise_at(vars(countryCode), funs(mean(High),mean(Low),mean(cumulative_number)))
df
df <- df[-c(14548:15921),]
df$Month[df$Month  == '01']  <-  'January'
df$Month[df$Month  == '02']  <-  'Febrauary'
df$Month[df$Month  == '03']  <-  'March'
df$Month[df$Month  == '04']  <-  'April'
df$Month[df$Month  == '05']  <-  'May'
df$Month[df$Month  == '06']  <-  'June'
df$Month[df$Month  == '07']  <-  'July'
df$Month[df$Month  == '08']  <-  'August'
df
#df_main=rename(df_main, mean_high_maximum_price_during_the_day = mean..1)
#df_main=rename(df_main, mean_low_minimum_price_during_the_day = mean..2)
#df_main=rename(df_main, sum_cases = mean..3)
# Rename columns
names(df)[names(df) == "mean..1"] <- "mean_high_maximum_price_during_the_day"
names(df)[names(df) == "mean..2"] <- "mean_low_minimum_price_during_the_day"
names(df)[names(df) == "mean..3"] <- "sum_cases"
# Filter the company's name
df <- filter(df, Ticker == 'CBA') #filter for each company
df
# Generate plot
cols <- c('red','blue');
par(lwd=6);
barplot(
t(df[c('mean_high_maximum_price_during_the_day','mean_low_minimum_price_during_the_day')]),
beside=T,
ylim=c(0,100),#change this based on the company
border=cols,
col='white',
names.arg=df$Month,
xlab='Months 2020',
ylab='Frequency',
legend.text=c('Maximum price','Minimun Price'),
args.legend=list(text.col=cols,col=cols,border=cols,bty='n')
);
stockData <- getCSV("Stocks.csv")
tables(stockData)
stockData
tables(stockData$Ticker)
table(stockData$Ticker)
runApp()
stockData <- getCSV("Stocks.csv")
table(stockData$Ticker)
runApp()
runApp()
runApp()
SelectedStockPlot <- "DRE Stock"
SelectedStockPlot <- str_split(SelectedStockPlot, " ", 1)
SelectedStockPlot <- strsplit(SelectedStockPlot, " ")
SelectedStockPlot
SelectedStockPlot <- "DRE Stock"
SelectedStockPlot <- strsplit(SelectedStockPlot, " ", 1)
SelectedStockPlot
SelectedStockPlot <- "DRE Stock"
SelectedStockPlot <- strsplit(SelectedStockPlot, " ")[[1]][1]
SelectedStockPlot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Sem 2/Case Studies in Data Sci/UI/WILProject1/pages/stocks.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
install.packages("DT")
=======
shinyApp(interface, site)
shiny::runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
#data <- read_csv(paste0("data/", cur, "_low.csv"))
data <- getCSV("BCH-AUD_low.csv")
runApp('C:/GitHub/WILProject1')
shiny::runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
# Get data
cryptoData <- getDisplayCryptoData()
# cryptoplot
cryptoPlot <- cryptoData %>%
ggplot(aes(x = date, y = close)) +
labs(title=cryptoData, x = "Date 2020", y = "close price (AUD)") +
geom_point(data = cryptoData[cryptoData$test != 'training',], aes(colour = test)) +
geom_line() +
coord_x_date(xlim = c("2020-01-01", "2020-09-01"))
>>>>>>> 48164250c7498e0d3d21ff9eedbb8e4be98e2908
# Get data
cryptoData <- getDisplayCryptoData()
# cryptoplot
cryptoPlot <- cryptoData %>%
<<<<<<< HEAD
=======
ggplot(aes(x = date, y = close)) +
labs(title="cryptoData", x = "Date 2020", y = "close price (AUD)") +
geom_point(data = cryptoData[cryptoData$test != 'training',], aes(colour = test)) +
geom_line() +
coord_x_date(xlim = c("2020-01-01", "2020-09-01"))
return(cryptoPlot)
currency_list = c("BCH-AUD", "BNB-AUD", "BTC-AUD", "EOS-AUD", "ETH-AUD",
"LINK-AUD", "LTC-AUD", "TRX-AUD", "USDT-AUD", "XRP-AUD")
#data <- read_csv(paste0("data/", cur, "_low.csv"))
data <- getCSV("BCH-AUD_low.csv")
return(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyquant)
library(dplyr)
library(readr)
library(ggplot2)
setwd("C:/Users/larks/Downloads/plot")
currency_list = c("BCH-AUD", "BNB-AUD", "BTC-AUD", "EOS-AUD", "ETH-AUD",
"LINK-AUD", "LTC-AUD", "TRX-AUD", "USDT-AUD", "XRP-AUD")
cur = currency_list[1]
stock_price <- read_csv(paste0("plot/", cur, "_low.csv"))
stock_price %>%
>>>>>>> 48164250c7498e0d3d21ff9eedbb8e4be98e2908
ggplot(aes(x = date, y = close)) +
labs(title="cryptoData", x = "Date 2020", y = "close price (AUD)") +
geom_point(data = cryptoData[cryptoData$test != 'training',], aes(colour = test)) +
geom_line() +
coord_x_date(xlim = c("2020-01-01", "2020-09-01"))
<<<<<<< HEAD
library(DT)
=======
data
View(data)
data
#data <- read_csv(paste0("data/", cur, "_low.csv"))
data <- getCSV("BCH-AUD_low.csv")
data
data <- read_csv(paste0("data/", cur, "_low.csv"))
getwd()
setwd("C:/GitHub/WILProject1")
data <- read_csv(paste0("data/", cur, "_low.csv"))
View(data)
# Get data
cryptoData <- getDisplayCryptoData()
>>>>>>> 48164250c7498e0d3d21ff9eedbb8e4be98e2908
# cryptoplot
cryptoPlot <- cryptoData %>%
ggplot(aes(x = date, y = close)) +
labs(title="cryptoData", x = "Date 2020", y = "close price (AUD)") +
geom_point(data = cryptoData[cryptoData$test != 'training',], aes(colour = test)) +
geom_line() +
coord_x_date(xlim = c("2020-01-01", "2020-09-01"))
<<<<<<< HEAD
=======
cryptoPlot
runApp()
runApp()
runApp()
runApp()
>>>>>>> 48164250c7498e0d3d21ff9eedbb8e4be98e2908
