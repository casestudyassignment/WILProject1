install.packages("ggplot2")
library(ggplot2)
require(ggplot2)
install.packages("swirl")
library(swirl)
install_course("R Programming E")
swirl()
x
ls
exists("x")
library(swirl)
install_course("R Programming E")
library(readr)
library(knitr)
library(tidyverse)
library(readr)
library(knitr)
library(tidyverse)
library(readr)
library(knitr)
library(tidyverse)
library(readr)
library(knitr)
library(tidyverse)
library(readr)
library(knitr)
library(tidyverse)
library(dplyr)
library(ggplot2)
#14 se for sampling distribution of mean n = 50
se <- 0.5/sqrt(50)
se
round(se,3)
#14 se for sampling distribution of mean n = 50
se <- 30/sqrt(3000)
round(se,3)
round(pnorm(q = 590, mean = 600, sd = 30)*100, 3)
round(pnorm(q = 595, mean = 600, sd = 30)*100, 3)
#2 10/20 will experience anxiety in 12 month period
#think i can use binomial here
round(dbinom(x = 10, size = 20, prob = 0.2),3)
#3 5/20
round(dbinom(x = 5, size = 20, prob = 0.2),3)
#4 5/30
round(dbinom(x = 5, size = 30, prob = 0.2),3)
#5 5 or 6 out of 20
a<-dbinom(x = 5:6, size = 20, prob = 0.2) %>% sum()
#5 5 or 6 out of 20
a<-dbinom(x = 5:6, size = 20, prob = 0.2) %>% sum()
round(a,3)
library(dplyr)
library(ggplot2)
#5 5 or 6 out of 20
a<-dbinom(x = 5:6, size = 20, prob = 0.2) %>% sum()
round(a,3)
#6 5 or more out of 10
round(pbinom(q = 4, size = 10, prob = 0.2, lower.tail = FALSE), 3)
#7 2 or more out of 20
b <- 1-pbinom(q = 2, size = 20, prob = 0.2, lower.tail = TRUE)
round(b, 3)
binom(x = 0:10, size = 30, prob = 0.2) %>% sum()
round(pbinom(q = 10, size = 30, prob = 0.2, lower.tail = TRUE), 3)
#8 5 or less out of 20
round(pbinom(q = 5, size = 20, prob = 0.2, lower.tail = TRUE), 3)
#10 and 11 mcq and expected no of attacks in 2 years
#12 10 in one year
round(dpois(x = 10, lambda = 10), 3)
#13 30 people in 2 years
round(dpois(x = 30, lambda = 10*2), 3)
#14 20 or less within a year
round(ppois(q = 20, lambda = 10), 3)
#15 15-20 within a year
d <- ppois(q = 20, lambda = 10) - ppois(q = 14, lambda = 10)
round(d, 3)
round(ppois(q = 20, lambda = 10, lower.tail = FALSE), 3)
#17 15 or 17 in a year
one <- dpois(x = 15, lambda = 10)
two <- dpois(x = 17, lambda = 10)
ans<- one+two
round(ans, 3)
#21 z score of 37.33 temp body
z <- (37.33-36.81)/0.41
z
round(z,x)
round(z,2)
#22 z score 35.72
score <- (35.72-36.81)/0.41
round(score,2)
round(temp, 2)
#23 2.41 z score
temp <- (2.41 * 0.41) + 36.81
round(temp, 2)
#24 -1.24 z score
temp2 <- (-1.24 * 0.41) + 36.81
round(temp2, 2)
#25 less than 36.39
round(pnorm(q = 36.39, mean = 36.81, sd = 0.41) * 100,2)
#25 less than 36.39
round(pnorm(q = 36.39, mean = 36.81, sd = 0.41),2)
#26 less than 37.93
round(pnorm(q = 37.93, mean = 36.81, sd = 0.41), 3)
#27 less than 35.82
round(pnorm(q = 35.82, mean = 36.81, sd = 0.41), 3)
#28 greater than 36.02
round(pnorm(q = 36.02, mean = 36.81, sd = 0.41, lower.tail = FALSE), 3)
#29 greater than 37.39
round(pnorm(q = 37.39, mean = 36.81, sd = 0.41, lower.tail = FALSE),3)
#30 greater than 38
round(pnorm(q = 38, mean = 36.81, sd = 0.41, lower.tail = FALSE),3)
#31 between 36.13 and 36.64
e <- pnorm(q = 36.64, mean = 36.81, sd = 0.41) - pnorm(q = 36.13, mean = 36.81, sd = 0.41)
round(e, 3)
#32 between 36.95 and 37.05
f <- pnorm(q = 37.05, mean = 36.81, sd = 0.41) - pnorm(q = 36.95, mean = 36.81, sd = 0.41)
round(f,3)
#33 between 37.2 and 37.3
g<-pnorm(q = 37.3, mean = 36.81, sd = 0.41) - pnorm(q = 37.2, mean = 36.81, sd = 0.41)
round(g,3)
#34 87th percentile what is temp
qnorm(p = 0.87, mean = 36.81, sd = 0.41)
#35 9th percentile what is temp
qnorm(p = 0.09, mean = 36.81, sd = 0.41)
#36 what percentile mild fever 39
zscore <- (39-36.81)/0.41
pnorm(q = zscore, mean = 36.81, sd = 0.41)
#2 10/20 will experience anxiety in 12 month period
#think i can use binomial here
round(dbinom(x = 10, size = 20, prob = 0.2),3)
#3 5/20
round(dbinom(x = 5, size = 20, prob = 0.2),3)
#4 5/30
round(dbinom(x = 5, size = 30, prob = 0.2),3)
#7 2 or more out of 20
b <- 1-pbinom(q = 2, size = 20, prob = 0.2, lower.tail = FALSE)
round(b, 3)
#7 2 or more out of 20
b <- pbinom(q = 2, size = 20, prob = 0.2, lower.tail = TRUE)
round(b, 3)
#7 2 or more out of 20
b <- 1-pbinom(q = 2, size = 20, prob = 0.2, lower.tail = TRUE)
install.packages("shinydashboard")
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shinydashboard)
install.packages("shinydashboard", dependencies = TRUE)
install.packages("shinydashboard", dependencies = TRUE)
library(shinydashboard)
#making a simple UI
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
install.packages("shiny", dependencies = TRUE)
install.packages("shiny", dependencies = TRUE)
library(shiny)
#making a simple UI
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
#making a simple UI
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
library(shinydashboard)
library(shiny)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
name <- c("Susan", "Jessica", "Matt", "Joe", "Andrew",
"Emily", "Harry")
class(name)
born <- c(1946L, 1985L, 1978L, 2012L, 1961L, 2016L, 1939L)
class(born)
place <- c("Melbourne", "Sydney", "Melbourne", "Perth", "Brisbane", "Sydney", "Adelaide")
name <- c("Susan", "Jessica", "Matt", "Joe", "Andrew",
"Emily", "Harry")
born <- c(1946L, 1985L, 1978L, 2012L, 1961L, 2016L, 1939L)
place <- c("Melbourne", "Sydney", "Melbourne", "Perth", "Brisbane", "Sydney", "Adelaide")
df1 <- data.frame(name, born, place, stringsAsFactors = FALSE)
View(df1)
year.born <- c(1946L, 1985L, 1978L, 2012L, 1961L, 2016L, 1939L)
place.born <- c("Melbourne", "Sydney", "Melbourne", "Perth", "Brisbane", "Sydney", "Adelaide")
df1 <- data.frame(name, born, place, stringsAsFactors = FALSE)
df1 <- data.frame(name, year.born, place.born, stringsAsFactors = FALSE)
year.marriage <- c(1975L, 2007L, 2002L, 1960L)
df2<- data.frame(name1, year.marriage, stringsAsFactors = FALSE)
name1 <- c("Susan", "Jessica", "Matt", "Harry")
year.marriage <- c(1975L, 2007L, 2002L, 1960L)
df2<- data.frame(name1, year.marriage, stringsAsFactors = FALSE)
View(df2)
name <- c("Susan", "Jessica", "Matt", "Harry")
year.marriage <- c(1975L, 2007L, 2002L, 1960L)
df2<- data.frame(name1, year.marriage, stringsAsFactors = FALSE)
View(df2)
name <- c("Susan", "Jessica", "Matt", "Harry")
year.marriage <- c(1975L, 2007L, 2002L, 1960L)
df2<- data.frame(name, year.marriage, stringsAsFactors = FALSE)
View(df2)
anti_join(df1, df2, by= "name")
library(tidyr)
library(dplyr)
library(readr)
library(knitr)
anti_join(df1, df2, by= "name")
x <- c(1:3, NA, 5, NA)
y <- is.na(x)
y
df <- data.frame(col1 = c(1:3, NA),
col2 = c("this", NA, "is", "text"),
col3 = c(TRUE, FALSE, TRUE, TRUE),
col4 = c(2.5, 4.2, 3.2, NA),
stringsAsFactors = FALSE)
x <- sum(is.na(df))
x
customer_id <- c(1, 2, 3, 1)
class(customer_id)
sales_id <- c(201, 202, 203, 204)
sales_person_id <- c("A1", "B3", "A1", "A2")
customer_id <- c(1, 2, 3, 1)
product_id <- c(102, 101, 101, 103)
quantity <- c(2, 3, 1, 5)
payment_type <- c("Debit", "Credit", "Cash", "Debit")
df <- data.frame(sales_id, sales_person_id, customer_id, product_id,
quantity, payment_type)
View(df)
str(df)
sales <- data.frame(sales_id, sales_person_id, customer_id, product_id,
quantity, payment_type)
name <- c("Eye Wear", "Watch", "Sunscreen", "Tent")
product_id <- c(101, 102, 103, 104)
price <- c(50.5, 20, 7.5, 150)
products <- data.frame(product_id, name, price)
View(products)
View(sales)
sold <- left_join(sales, products)
View(sold)
sold %>% select(product_id)
sold %>% select(name)
products %>% filter(price < 50)
products
customer_name <- c("George", "Beth", "Ann", "Tom")
customer_id <- c(1,2,3,4)
customer_surname <- c("Nash", "Hart", "Wilkins", "Stewart")
customers <- c(customer_id, customer_name, customer_surname)
customers <- data.frame(customer_id, customer_name, customer_surname)
View(customers)
sales_person <- c("A1", "A2", "A3", "B1", "B2", "B3")
first_name <- c("John", "Jane", "Michael", "Jim", "Karen","Kate")
last_name <- c("Doe", "Smith", "Brown", "Johnson", "Wilson", "Taylor")
employees <- data.frame(sales_person, first_name, last_name)
View(employees)
who_sold <-left_join(sales, employees, by = "sales_person_id")
sales_person_id <- c("A1", "A2", "A3", "B1", "B2", "B3")
first_name <- c("John", "Jane", "Michael", "Jim", "Karen","Kate")
last_name <- c("Doe", "Smith", "Brown", "Johnson", "Wilson", "Taylor")
employees <- data.frame(sales_person, first_name, last_name)
View(employees)
employees <- data.frame(sales_person_id, first_name, last_name)
View(employees)
who_sold <-left_join(sales, employees, by = "sales_person_id")
who_sold
who_sold %>% select(first_name, last_name)
View(who_sold)
who_sold %>% left_join(products, by = "product_id") %>% select(first_name, last_name, name)
most_sales <- left_join(sales, employees, by = "sales_person_id")
View(most_sales)
most_sales <- left_join(sales, employees, by = "sales_person_id")
most_sales %>% group_by(sales_person_id) %>% summarise(sum = n())
most_sales %>% group_by(sales_person_id) %>% summarise(sum = n()) %>% arrange(desc(sales_person_id))
most_sales %>% group_by(sales_person_id) %>% summarise(sum = n()) %>% arrange(desc())
most_sales %>% group_by(sales_person_id) %>% summarise(sum = n()) %>% arrange(sales_person_id)
most_sales %>% group_by(sales_person_id) %>% summarise(sum = n()) %>% arrange(first_name)
most_sales %>% group_by(sales_person_id) %>% summarise(sum = n()) %>% arrange(sales_person_id)
most_sales %>% group_by(sales_person_id, first_name) %>% summarise(sum = n()) %>% arrange(sales_person_id)
measure <- c("Temperature", "Humidity", "Wind")
MEL <- c(19, 46, 15)
SYD <- c(24, 41, 23)
BNE <- c(33, 43, 10)
weather <- data.frame(measure, MEL, SYD, BNE)
View(weather)
weather %>% gather(key = "Averages", value = "Ratio", 'MEL', 'SYD', 'BNE')
weather %>% gather(key = "Cities", value = "Averages", 'MEL', 'SYD', 'BNE')
calculate_ratio <- weather %>% gather(key = "Cities", value = "Averages", 'MEL', 'SYD', 'BNE')
calculate_ratio <- weather %>% spread (key = "measure", value = "Averages", 'MEL', 'SYD', 'BNE')
calculate_ratio <- weather %>% spread (key = "measure", value = "Averages", 'MEL', 'SYD', 'BNE')
View(calculate_ratio)
calculate_ratio %>% spread(key = "measure", value = "Averages")
calculate_ratio %>% spread(key = "measure", value = "Averages") %>% mutate(Ratio = Temperature/Humidity)
calculate_ratio <- weather %>% gather(key = "measure", value = "Averages", 'MEL', 'SYD', 'BNE')
calculate_ratio %>% spread(key = "measure", value = "Averages") %>% mutate(Ratio = Temperature/Humidity)
df4 <- weather %>% gather(key = "measure", value = "Averages", 'MEL', 'SYD', 'BNE')
df4 %>% spread(key = "measure", value = "Averages") %>% mutate(Ratio = Temperature/Humidity)
df4 <- weather %>% gather(key = "measure", value = "Averages", 'MEL', 'SYD', 'BNE')
df4 %>% spread(key = "measure", value = "Averages") %>% mutate(Ratio = Temperature/Humidity)
df4 <- weather %>% gather(key = "measure", value = "Averages", 'MEL', 'SYD', 'BNE')
View(df4)
df4 <- weather %>% gather(key = "Cities", value = "Averages", 'MEL', 'SYD', 'BNE')
df4 <- weather %>% gather(key = "Cities", value = "Averages", 'MEL', 'SYD', 'BNE')
df4 %>% spread(key = "measure", value = "Averages") %>% mutate(Ratio = Temperature/Humidity)
ls<- list(v1 = c(1,4,3), list(c(TRUE, FALSE)), m1=matrix(rep(c(4,2,3,8), 2), nrow = 2, ncol = 4)))
ls<- list(v1 = c(1,4,3), list(c(TRUE, FALSE), m1=matrix(rep(c(4,2,3,8), 2), nrow = 2, ncol = 4)))
ls
ls[m1]
ls[[2]]
ls[[2[,1:3]]]
ls[[2][1:3,]]
ls[[2]]
ls[[2, c(1,4)]]
ls$m1
ls$m1[,c(1,3)]
ls[[2]]
ls[[2(,c(1,3))]]
df <- data.frame(col1 = c(1:3, NA),
col2 = c("this", "NA", "is", "text"),
col3 = c(FALSE, FALSE, TRUE, TRUE),
col4 = c(3.5, 2.2, 5.2, NA),
stringsAsFactors = FALSE)
x <- sum(is.na(df))
x
var <- c(12.2, 3.5, "4.6")
class(var)
ls[["m1"]]
ls[[m1]]
ls[[c(2,2)]]
extract[,c(1,3)]
extract<- ls[[c(2,2)]]
extract[,c(1,3)]
library(shinydashboard)
library(shiny)
library(readr)
#splitting parts easier readability
header <- dashboardHeader(title = "COVID-19 Finance Dashboard")
sidebar <- dashboardSidebar(sidebarMenu(
sidebarSearchForm(textId = "searchText", buttonId = "searchButton",
label = "Search..."),
menuItem("Data Visualisation", tabName = "Data_Visualisation", icon = icon("chart-bar", lib = "font-awesome"),
startExpanded = TRUE,
menuSubItem("Unemployment Rate", tabName = "Unemployment_Rate")),
menuItem("COVID Stocks", tabName = "COVID_Stocks", icon = icon("chart-bar", lib = "font-awesome")),
menuItem("COVID Government", tabName = "COVID_Government", icon = icon("book")),
menuItem("COVID Cryptocurrency", tabName = "COVID_Cryptocurrency", icon = icon("money")),
menuItem("COVID Ecommerce", tabName = "COVID_Ecommerce", icon = icon("shopping-cart", lib = "font-awesome")),
menuItem("COVID Banking", tabName = "COVID_Banking", icon = icon("piggy-bank", lib = "font-awesome"))
))
body <- dashboardBody(
tabItems(
tabItem("Unemployment_Rate",
tabsetPanel(
tabPanel("Data Viewer",
fluidPage("Render dataset tables here")
),
tabPanel("Data Visualisation",
fluidPage("Render plots here")
)
)),
tabItem(tabName = "COVID_Stocks",
fluidRow(
box(
title = "Histogram", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
plotOutput("plot1", height = 250)
),
box(
title = "Parameter Settings", status = "warning",solidHeader = TRUE,
"Box content here", br(), "More box content",
sliderInput("slider", "Slider input:", 1, 100, 50),
textInput("text", "Text input:")
),
box(
title = "Table", status = "warning",solidHeader = TRUE,
collapsible = TRUE,
dataTableOutput('table')
)
)
),
tabItem(tabName = "COVID_Government",
h2("COVID Government tab content")
),
tabItem(tabName = "COVID_Cryptocurrency",
h2("COVID Cryptocurrency tab content")
),
tabItem(tabName = "COVID_Ecommerce",
h2("COVID Ecommerce tab content")
),
tabItem(tabName = "COVID_Banking",
h2("COVID Banking tab content")
)
)
)
interface <- dashboardPage(header, sidebar, body)
site <- function(input, output) {
#import dataset
tbl <- read_csv("data/small_covid_data.csv")
output$table <- renderDataTable(tbl)
#output$table.output <- renderTable({
#  mydata()
#})
#output$plot1 <- renderPlot({
#  x <- tbl()[,1]
#  plot(x)
#})
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(interface, site)
shiny::runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
#data <- read_csv(paste0("data/", cur, "_low.csv"))
data <- getCSV("BCH-AUD_low.csv")
runApp('C:/GitHub/WILProject1')
shiny::runApp('C:/GitHub/WILProject1')
getwd()
getwd()
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
library(readr)
library(dplyr)
library(magrittr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(data.table)
library(xts)
library(plyr)
library(DT)
library(tidyquant)
source('servers/util.R')
getDisplayCMCrypto <- function(input, output){
data <- read_tsv(paste0("data/", input, "_low.csv"))
return(data)
}
shiny::runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
getwd()
setwd("C:/GitHub/WILProject1/data")
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
library(readr)
txt <- read_tsv("BNB-AUD.txt")
txt
library(readr)
txt <- read_tsv("BNB-AUD.txt")
txt
txt <- read_tsv("BNB-AUD_low.txt")
txt
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
getwd()
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
runApp('C:/GitHub/WILProject1')
